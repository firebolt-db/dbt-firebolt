{
  "uid" : "d1b497c0a8a4bffa",
  "name" : "test_references",
  "fullName" : "tests.functional.adapter.test_basic.TestDocsGenReferencesFirebolt#test_references",
  "historyId" : "780a44c2b193969f3f7908213cd1cd90",
  "time" : {
    "start" : 1707156277266,
    "stop" : 1707156277266,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "dbt.exceptions.DbtRuntimeError: Runtime Error\n  Runtime Error\n    Database Error\n      Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\n      For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",
  "statusTrace" : "cls = <class 'dbt.adapters.firebolt.connections.FireboltConnectionManager'>\nconnection = Connection(type='firebolt', name='_test', state=<ConnectionState.CLOSED: 'closed'>, transaction_open=False, _handle=No...'com.firebolt.FireboltDriver', engine_name='integration_testing__1707155886557', account_name='automation', retries=1))\nconnect = <function FireboltConnectionManager.open.<locals>.connect at 0x7f45f6b9c040>\nlogger = AdapterLogger(name='Firebolt')\nretryable_exceptions = [<class 'firebolt.utils.exception.FireboltDatabaseError'>, <class 'firebolt.utils.exception.ConnectionError'>, <class 'firebolt.utils.exception.InterfaceError'>]\nretry_limit = 1, retry_timeout = 1, _attempts = 0\n\n    @classmethod\n    def retry_connection(\n        cls,\n        connection: Connection,\n        connect: Callable[[], AdapterHandle],\n        logger: AdapterLogger,\n        retryable_exceptions: Iterable[Type[Exception]],\n        retry_limit: int = 1,\n        retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1,\n        _attempts: int = 0,\n    ) -> Connection:\n        \"\"\"Given a Connection, set its handle by calling connect.\n    \n        The calls to connect will be retried up to retry_limit times to deal with transient\n        connection errors. By default, one retry will be attempted if retryable_exceptions is set.\n    \n        :param Connection connection: An instance of a Connection that needs a handle to be set,\n            usually when attempting to open it.\n        :param connect: A callable that returns the appropiate connection handle for a\n            given adapter. This callable will be retried retry_limit times if a subclass of any\n            Exception in retryable_exceptions is raised by connect.\n        :type connect: Callable[[], AdapterHandle]\n        :param AdapterLogger logger: A logger to emit messages on retry attempts or errors. When\n            handling expected errors, we call debug, and call warning on unexpected errors or when\n            all retry attempts have been exhausted.\n        :param retryable_exceptions: An iterable of exception classes that if raised by\n            connect should trigger a retry.\n        :type retryable_exceptions: Iterable[Type[Exception]]\n        :param int retry_limit: How many times to retry the call to connect. If this limit\n            is exceeded before a successful call, a FailedToConnectError will be raised.\n            Must be non-negative.\n        :param retry_timeout: Time to wait between attempts to connect. Can also take a\n            Callable that takes the number of attempts so far, beginning at 0, and returns an int\n            or float to be passed to time.sleep.\n        :type retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1\n        :param int _attempts: Parameter used to keep track of the number of attempts in calling the\n            connect function across recursive calls. Passed as an argument to retry_timeout if it\n            is a Callable. This parameter should not be set by the initial caller.\n        :raises dbt.exceptions.FailedToConnectError: Upon exhausting all retry attempts without\n            successfully acquiring a handle.\n        :return: The given connection with its appropriate state and handle attributes set\n            depending on whether we successfully acquired a handle or not.\n        \"\"\"\n        timeout = retry_timeout(_attempts) if callable(retry_timeout) else retry_timeout\n        if timeout < 0:\n            raise dbt.exceptions.FailedToConnectError(\n                \"retry_timeout cannot be negative or return a negative time.\"\n            )\n    \n        if retry_limit < 0 or retry_limit > sys.getrecursionlimit():\n            # This guard is not perfect others may add to the recursion limit (e.g. built-ins).\n            connection.handle = None\n            connection.state = ConnectionState.FAIL\n            raise dbt.exceptions.FailedToConnectError(\"retry_limit cannot be negative\")\n    \n        try:\n>           connection.handle = connect()\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/connections.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:121: in connect\n    handle = sdk_connect(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/connection.py:53: in connect\n    return connect_v2(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/connection.py:142: in connect_v2\n    ) = cursor._get_engine_url_status_db(system_engine_connection, engine_name)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:450: in _get_engine_url_status_db\n    cursor.execute(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/common/base_cursor.py:93: in inner\n    return func(self, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:254: in execute\n    self._do_execute(query, params_list, skip_parsing, async_execution)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:197: in _do_execute\n    resp = self._api_request(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:398: in _api_request\n    parameters[\"account_id\"] = self._client.account_id\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/client/client.py:155: in account_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500 Internal Server Error]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/httpx/_models.py:759: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = \"\\n\\n      SELECT 'create_schema'\\n  \"\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n>           yield\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/connections.py:79: in add_query\n    cursor = connection.handle.cursor()\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/contracts/connection.py:90: in handle\n    self._handle.resolve(self)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/contracts/connection.py:114: in resolve\n    return self.opener(connection)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:137: in open\n    return cls.retry_connection(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dbt.adapters.firebolt.connections.FireboltConnectionManager'>\nconnection = Connection(type='firebolt', name='_test', state=<ConnectionState.CLOSED: 'closed'>, transaction_open=False, _handle=No...'com.firebolt.FireboltDriver', engine_name='integration_testing__1707155886557', account_name='automation', retries=1))\nconnect = <function FireboltConnectionManager.open.<locals>.connect at 0x7f45f6b9c040>\nlogger = AdapterLogger(name='Firebolt')\nretryable_exceptions = [<class 'firebolt.utils.exception.FireboltDatabaseError'>, <class 'firebolt.utils.exception.ConnectionError'>, <class 'firebolt.utils.exception.InterfaceError'>]\nretry_limit = 1, retry_timeout = 1, _attempts = 0\n\n    @classmethod\n    def retry_connection(\n        cls,\n        connection: Connection,\n        connect: Callable[[], AdapterHandle],\n        logger: AdapterLogger,\n        retryable_exceptions: Iterable[Type[Exception]],\n        retry_limit: int = 1,\n        retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1,\n        _attempts: int = 0,\n    ) -> Connection:\n        \"\"\"Given a Connection, set its handle by calling connect.\n    \n        The calls to connect will be retried up to retry_limit times to deal with transient\n        connection errors. By default, one retry will be attempted if retryable_exceptions is set.\n    \n        :param Connection connection: An instance of a Connection that needs a handle to be set,\n            usually when attempting to open it.\n        :param connect: A callable that returns the appropiate connection handle for a\n            given adapter. This callable will be retried retry_limit times if a subclass of any\n            Exception in retryable_exceptions is raised by connect.\n        :type connect: Callable[[], AdapterHandle]\n        :param AdapterLogger logger: A logger to emit messages on retry attempts or errors. When\n            handling expected errors, we call debug, and call warning on unexpected errors or when\n            all retry attempts have been exhausted.\n        :param retryable_exceptions: An iterable of exception classes that if raised by\n            connect should trigger a retry.\n        :type retryable_exceptions: Iterable[Type[Exception]]\n        :param int retry_limit: How many times to retry the call to connect. If this limit\n            is exceeded before a successful call, a FailedToConnectError will be raised.\n            Must be non-negative.\n        :param retry_timeout: Time to wait between attempts to connect. Can also take a\n            Callable that takes the number of attempts so far, beginning at 0, and returns an int\n            or float to be passed to time.sleep.\n        :type retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1\n        :param int _attempts: Parameter used to keep track of the number of attempts in calling the\n            connect function across recursive calls. Passed as an argument to retry_timeout if it\n            is a Callable. This parameter should not be set by the initial caller.\n        :raises dbt.exceptions.FailedToConnectError: Upon exhausting all retry attempts without\n            successfully acquiring a handle.\n        :return: The given connection with its appropriate state and handle attributes set\n            depending on whether we successfully acquired a handle or not.\n        \"\"\"\n        timeout = retry_timeout(_attempts) if callable(retry_timeout) else retry_timeout\n        if timeout < 0:\n            raise dbt.exceptions.FailedToConnectError(\n                \"retry_timeout cannot be negative or return a negative time.\"\n            )\n    \n        if retry_limit < 0 or retry_limit > sys.getrecursionlimit():\n            # This guard is not perfect others may add to the recursion limit (e.g. built-ins).\n            connection.handle = None\n            connection.state = ConnectionState.FAIL\n            raise dbt.exceptions.FailedToConnectError(\"retry_limit cannot be negative\")\n    \n        try:\n            connection.handle = connect()\n            connection.state = ConnectionState.OPEN\n            return connection\n    \n        except tuple(retryable_exceptions) as e:\n            if retry_limit <= 0:\n                connection.handle = None\n                connection.state = ConnectionState.FAIL\n                raise dbt.exceptions.FailedToConnectError(str(e))\n    \n            logger.debug(\n                f\"Got a retryable error when attempting to open a {cls.TYPE} connection.\\n\"\n                f\"{retry_limit} attempts remaining. Retrying in {timeout} seconds.\\n\"\n                f\"Error:\\n{e}\"\n            )\n    \n            sleep(timeout)\n            return cls.retry_connection(\n                connection=connection,\n                connect=connect,\n                logger=logger,\n                retry_limit=retry_limit - 1,\n                retry_timeout=retry_timeout,\n                retryable_exceptions=retryable_exceptions,\n                _attempts=_attempts + 1,\n            )\n    \n        except Exception as e:\n            connection.handle = None\n            connection.state = ConnectionState.FAIL\n>           raise dbt.exceptions.FailedToConnectError(str(e))\nE           dbt.exceptions.FailedToConnectError: Database Error\nE             Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE             For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/connections.py:271: FailedToConnectError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = 'macro create_schema'\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n>           yield\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py:1112: in execute_macro\n    result = macro_function(**kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:330: in __call__\n    return self.call_macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:257: in call_macro\n    return macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:763: in __call__\n    return self._invoke(arguments, autoescape)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:777: in _invoke\n    rv = self._func(*arguments)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/sandbox.py:393: in call\n    return __context.call(__obj, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:298: in call\n    return __obj(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:330: in __call__\n    return self.call_macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:257: in call_macro\n    return macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:763: in __call__\n    return self._invoke(arguments, autoescape)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:777: in _invoke\n    rv = self._func(*arguments)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/sandbox.py:393: in call\n    return __context.call(__obj, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:298: in call\n    return __obj(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:330: in __call__\n    return self.call_macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:257: in call_macro\n    return macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:763: in __call__\n    return self._invoke(arguments, autoescape)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:777: in _invoke\n    rv = self._func(*arguments)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/sandbox.py:393: in call\n    return __context.call(__obj, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:298: in call\n    return __obj(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py:310: in execute\n    return self.connections.execute(sql=sql, auto_begin=auto_begin, fetch=fetch, limit=limit)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/connections.py:138: in execute\n    _, cursor = self.add_query(sql, auto_begin)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/connections.py:90: in add_query\n    return connection, cursor\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = \"\\n\\n      SELECT 'create_schema'\\n  \"\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n            yield\n        except Exception as e:\n            self.release()\n>           raise DbtRuntimeError(str(e))\nE           dbt.exceptions.DbtRuntimeError: Runtime Error\nE             Database Error\nE               Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE               For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:151: DbtRuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nclean_up_logging = None\nproject_root = local('/tmp/pytest-of-runner/pytest-0/project8')\nprofiles_root = local('/tmp/pytest-of-runner/pytest-0/profile8')\nrequest = <SubRequest 'project' for <Function test_references>>\nunique_schema = 'public'\nprofiles_yml = {'config': {'send_anonymous_usage_stats': False}, 'test': {'outputs': {'default': {'account_name': 'automation', 'api_...'client_id': 'mrWFcIhFtkxKd5fLm40MrRp7rDuZBBZ0', 'client_secret': SecretStr('**********'), ...}}, 'target': 'default'}}\ndbt_project_yml = {'asset-paths': ['assets', 'invalid-asset-paths'], 'name': 'test', 'profile': 'test', 'seeds': {'quote_columns': True}, ...}\npackages_yml = None, dependencies_yml = None, selectors_yml = None\nadapter = <dbt.adapters.firebolt.impl.FireboltAdapter object at 0x7f45f690cf10>\nproject_files = None\nshared_data_dir = '/home/runner/work/dbt-firebolt/dbt-firebolt/tests/data'\ntest_data_dir = '/home/runner/work/dbt-firebolt/dbt-firebolt/tests/functional/adapter/data'\nlogs_dir = '/home/runner/work/dbt-firebolt/dbt-firebolt/logs/test17071562775346847467'\ntest_config = {}\n\n    @pytest.fixture(scope=\"class\")\n    def project(\n        clean_up_logging,\n        project_root,\n        profiles_root,\n        request,\n        unique_schema,\n        profiles_yml,\n        dbt_project_yml,\n        packages_yml,\n        dependencies_yml,\n        selectors_yml,\n        adapter,\n        project_files,\n        shared_data_dir,\n        test_data_dir,\n        logs_dir,\n        test_config,\n    ):\n        # Logbook warnings are ignored so we don't have to fork logbook to support python 3.10.\n        # This _only_ works for tests in `tests/` that use the project fixture.\n        warnings.filterwarnings(\"ignore\", category=DeprecationWarning, module=\"logbook\")\n        log_flags = Namespace(\n            LOG_PATH=logs_dir,\n            LOG_FORMAT=\"json\",\n            LOG_FORMAT_FILE=\"json\",\n            USE_COLORS=False,\n            USE_COLORS_FILE=False,\n            LOG_LEVEL=\"info\",\n            LOG_LEVEL_FILE=\"debug\",\n            DEBUG=False,\n            LOG_CACHE_EVENTS=False,\n            QUIET=False,\n            LOG_FILE_MAX_BYTES=1000000,\n        )\n        setup_event_logger(log_flags)\n        orig_cwd = os.getcwd()\n        os.chdir(project_root)\n        # Return whatever is needed later in tests but can only come from fixtures, so we can keep\n        # the signatures in the test signature to a minimum.\n        project = TestProjInfo(\n            project_root=project_root,\n            profiles_dir=profiles_root,\n            adapter_type=adapter.type(),\n            test_dir=request.fspath.dirname,\n            shared_data_dir=shared_data_dir,\n            test_data_dir=test_data_dir,\n            test_schema=unique_schema,\n            database=adapter.config.credentials.database,\n            test_config=test_config,\n        )\n        project.drop_test_schema()\n>       project.create_test_schema()\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/tests/fixtures/project.py:524: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/tests/fixtures/project.py:440: in create_test_schema\n    self.adapter.create_schema(relation)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/impl.py:164: in create_schema\n    self.execute_macro(CREATE_SCHEMA_MACRO_NAME, kwargs=kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py:1112: in execute_macro\n    result = macro_function(**kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = 'macro create_schema'\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n            yield\n        except Exception as e:\n            self.release()\n>           raise DbtRuntimeError(str(e))\nE           dbt.exceptions.DbtRuntimeError: Runtime Error\nE             Runtime Error\nE               Database Error\nE                 Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE                 For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:151: DbtRuntimeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dbt_profile_data",
    "time" : {
      "start" : 1707156277268,
      "stop" : 1707156277268,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "unique_schema",
    "time" : {
      "start" : 1707156278246,
      "stop" : 1707156278246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "macros",
    "time" : {
      "start" : 1707156278679,
      "stop" : 1707156278679,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmpdir_factory",
    "time" : {
      "start" : 1707156084589,
      "stop" : 1707156084589,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "logs_dir",
    "time" : {
      "start" : 1707156277708,
      "stop" : 1707156277708,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "macros",
    "time" : {
      "start" : 1707156277706,
      "stop" : 1707156277707,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "adapter",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277706,
      "duration" : 436
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "analyses",
    "time" : {
      "start" : 1707156277707,
      "stop" : 1707156277707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "profiles_yml",
    "time" : {
      "start" : 1707156277268,
      "stop" : 1707156277269,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project_root",
    "time" : {
      "start" : 1707156277266,
      "stop" : 1707156277267,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "profiles_root",
    "time" : {
      "start" : 1707156277267,
      "stop" : 1707156277267,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "snapshots",
    "time" : {
      "start" : 1707156277707,
      "stop" : 1707156277707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tests",
    "time" : {
      "start" : 1707156277707,
      "stop" : 1707156277707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "unique_schema",
    "time" : {
      "start" : 1707156277267,
      "stop" : 1707156277267,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "profiles_config_update",
    "time" : {
      "start" : 1707156277268,
      "stop" : 1707156277268,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dbt_profile_target",
    "time" : {
      "start" : 1707156277268,
      "stop" : 1707156277268,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dependencies",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_data_dir",
    "time" : {
      "start" : 1707156084589,
      "stop" : 1707156084589,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1707156277708,
      "stop" : 1707156277899,
      "duration" : 191
    },
    "status" : "broken",
    "statusMessage" : "dbt.exceptions.DbtRuntimeError: Runtime Error\n  Runtime Error\n    Database Error\n      Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\n      For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/tests/fixtures/project.py\", line 524, in project\n    project.create_test_schema()\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/tests/fixtures/project.py\", line 440, in create_test_schema\n    self.adapter.create_schema(relation)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/impl.py\", line 164, in create_schema\n    self.execute_macro(CREATE_SCHEMA_MACRO_NAME, kwargs=kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py\", line 1112, in execute_macro\n    result = macro_function(**kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/contextlib.py\", line 137, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py\", line 151, in exception_handler\n    raise DbtRuntimeError(str(e))\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "project_config_update",
    "time" : {
      "start" : 1707156277269,
      "stop" : 1707156277269,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "packages",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shared_data_dir",
    "time" : {
      "start" : 1707156084589,
      "stop" : 1707156084589,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "models",
    "time" : {
      "start" : 1707156277706,
      "stop" : 1707156277706,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "packages_yml",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_config",
    "time" : {
      "start" : 1707156277708,
      "stop" : 1707156277708,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prefix",
    "time" : {
      "start" : 1707156277267,
      "stop" : 1707156277267,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "seeds",
    "time" : {
      "start" : 1707156278679,
      "stop" : 1707156278679,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dependencies_yml",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "selectors_yml",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "properties",
    "time" : {
      "start" : 1707156277707,
      "stop" : 1707156277707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clean_up_logging",
    "time" : {
      "start" : 1707156277266,
      "stop" : 1707156277266,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "selectors",
    "time" : {
      "start" : 1707156277270,
      "stop" : 1707156277270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project_config_update",
    "time" : {
      "start" : 1707156278247,
      "stop" : 1707156278247,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dbt_project_yml",
    "time" : {
      "start" : 1707156277269,
      "stop" : 1707156277270,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project_files",
    "time" : {
      "start" : 1707156277707,
      "stop" : 1707156277708,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "seeds",
    "time" : {
      "start" : 1707156277707,
      "stop" : 1707156277707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "snapshots",
    "time" : {
      "start" : 1707156278679,
      "stop" : 1707156278679,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "dbt.exceptions.DbtRuntimeError: Runtime Error\n  Runtime Error\n    Database Error\n      Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\n      For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",
    "statusTrace" : "cls = <class 'dbt.adapters.firebolt.connections.FireboltConnectionManager'>\nconnection = Connection(type='firebolt', name='_test', state=<ConnectionState.CLOSED: 'closed'>, transaction_open=False, _handle=No...'com.firebolt.FireboltDriver', engine_name='integration_testing__1707155886557', account_name='automation', retries=1))\nconnect = <function FireboltConnectionManager.open.<locals>.connect at 0x7f45f6b9c040>\nlogger = AdapterLogger(name='Firebolt')\nretryable_exceptions = [<class 'firebolt.utils.exception.FireboltDatabaseError'>, <class 'firebolt.utils.exception.ConnectionError'>, <class 'firebolt.utils.exception.InterfaceError'>]\nretry_limit = 1, retry_timeout = 1, _attempts = 0\n\n    @classmethod\n    def retry_connection(\n        cls,\n        connection: Connection,\n        connect: Callable[[], AdapterHandle],\n        logger: AdapterLogger,\n        retryable_exceptions: Iterable[Type[Exception]],\n        retry_limit: int = 1,\n        retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1,\n        _attempts: int = 0,\n    ) -> Connection:\n        \"\"\"Given a Connection, set its handle by calling connect.\n    \n        The calls to connect will be retried up to retry_limit times to deal with transient\n        connection errors. By default, one retry will be attempted if retryable_exceptions is set.\n    \n        :param Connection connection: An instance of a Connection that needs a handle to be set,\n            usually when attempting to open it.\n        :param connect: A callable that returns the appropiate connection handle for a\n            given adapter. This callable will be retried retry_limit times if a subclass of any\n            Exception in retryable_exceptions is raised by connect.\n        :type connect: Callable[[], AdapterHandle]\n        :param AdapterLogger logger: A logger to emit messages on retry attempts or errors. When\n            handling expected errors, we call debug, and call warning on unexpected errors or when\n            all retry attempts have been exhausted.\n        :param retryable_exceptions: An iterable of exception classes that if raised by\n            connect should trigger a retry.\n        :type retryable_exceptions: Iterable[Type[Exception]]\n        :param int retry_limit: How many times to retry the call to connect. If this limit\n            is exceeded before a successful call, a FailedToConnectError will be raised.\n            Must be non-negative.\n        :param retry_timeout: Time to wait between attempts to connect. Can also take a\n            Callable that takes the number of attempts so far, beginning at 0, and returns an int\n            or float to be passed to time.sleep.\n        :type retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1\n        :param int _attempts: Parameter used to keep track of the number of attempts in calling the\n            connect function across recursive calls. Passed as an argument to retry_timeout if it\n            is a Callable. This parameter should not be set by the initial caller.\n        :raises dbt.exceptions.FailedToConnectError: Upon exhausting all retry attempts without\n            successfully acquiring a handle.\n        :return: The given connection with its appropriate state and handle attributes set\n            depending on whether we successfully acquired a handle or not.\n        \"\"\"\n        timeout = retry_timeout(_attempts) if callable(retry_timeout) else retry_timeout\n        if timeout < 0:\n            raise dbt.exceptions.FailedToConnectError(\n                \"retry_timeout cannot be negative or return a negative time.\"\n            )\n    \n        if retry_limit < 0 or retry_limit > sys.getrecursionlimit():\n            # This guard is not perfect others may add to the recursion limit (e.g. built-ins).\n            connection.handle = None\n            connection.state = ConnectionState.FAIL\n            raise dbt.exceptions.FailedToConnectError(\"retry_limit cannot be negative\")\n    \n        try:\n>           connection.handle = connect()\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/connections.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:121: in connect\n    handle = sdk_connect(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/connection.py:53: in connect\n    return connect_v2(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/connection.py:142: in connect_v2\n    ) = cursor._get_engine_url_status_db(system_engine_connection, engine_name)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:450: in _get_engine_url_status_db\n    cursor.execute(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/common/base_cursor.py:93: in inner\n    return func(self, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:254: in execute\n    self._do_execute(query, params_list, skip_parsing, async_execution)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:197: in _do_execute\n    resp = self._api_request(\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/db/cursor.py:398: in _api_request\n    parameters[\"account_id\"] = self._client.account_id\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/firebolt/client/client.py:155: in account_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500 Internal Server Error]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/httpx/_models.py:759: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = \"\\n\\n      SELECT 'create_schema'\\n  \"\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n>           yield\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/connections.py:79: in add_query\n    cursor = connection.handle.cursor()\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/contracts/connection.py:90: in handle\n    self._handle.resolve(self)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/contracts/connection.py:114: in resolve\n    return self.opener(connection)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:137: in open\n    return cls.retry_connection(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dbt.adapters.firebolt.connections.FireboltConnectionManager'>\nconnection = Connection(type='firebolt', name='_test', state=<ConnectionState.CLOSED: 'closed'>, transaction_open=False, _handle=No...'com.firebolt.FireboltDriver', engine_name='integration_testing__1707155886557', account_name='automation', retries=1))\nconnect = <function FireboltConnectionManager.open.<locals>.connect at 0x7f45f6b9c040>\nlogger = AdapterLogger(name='Firebolt')\nretryable_exceptions = [<class 'firebolt.utils.exception.FireboltDatabaseError'>, <class 'firebolt.utils.exception.ConnectionError'>, <class 'firebolt.utils.exception.InterfaceError'>]\nretry_limit = 1, retry_timeout = 1, _attempts = 0\n\n    @classmethod\n    def retry_connection(\n        cls,\n        connection: Connection,\n        connect: Callable[[], AdapterHandle],\n        logger: AdapterLogger,\n        retryable_exceptions: Iterable[Type[Exception]],\n        retry_limit: int = 1,\n        retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1,\n        _attempts: int = 0,\n    ) -> Connection:\n        \"\"\"Given a Connection, set its handle by calling connect.\n    \n        The calls to connect will be retried up to retry_limit times to deal with transient\n        connection errors. By default, one retry will be attempted if retryable_exceptions is set.\n    \n        :param Connection connection: An instance of a Connection that needs a handle to be set,\n            usually when attempting to open it.\n        :param connect: A callable that returns the appropiate connection handle for a\n            given adapter. This callable will be retried retry_limit times if a subclass of any\n            Exception in retryable_exceptions is raised by connect.\n        :type connect: Callable[[], AdapterHandle]\n        :param AdapterLogger logger: A logger to emit messages on retry attempts or errors. When\n            handling expected errors, we call debug, and call warning on unexpected errors or when\n            all retry attempts have been exhausted.\n        :param retryable_exceptions: An iterable of exception classes that if raised by\n            connect should trigger a retry.\n        :type retryable_exceptions: Iterable[Type[Exception]]\n        :param int retry_limit: How many times to retry the call to connect. If this limit\n            is exceeded before a successful call, a FailedToConnectError will be raised.\n            Must be non-negative.\n        :param retry_timeout: Time to wait between attempts to connect. Can also take a\n            Callable that takes the number of attempts so far, beginning at 0, and returns an int\n            or float to be passed to time.sleep.\n        :type retry_timeout: Union[Callable[[int], SleepTime], SleepTime] = 1\n        :param int _attempts: Parameter used to keep track of the number of attempts in calling the\n            connect function across recursive calls. Passed as an argument to retry_timeout if it\n            is a Callable. This parameter should not be set by the initial caller.\n        :raises dbt.exceptions.FailedToConnectError: Upon exhausting all retry attempts without\n            successfully acquiring a handle.\n        :return: The given connection with its appropriate state and handle attributes set\n            depending on whether we successfully acquired a handle or not.\n        \"\"\"\n        timeout = retry_timeout(_attempts) if callable(retry_timeout) else retry_timeout\n        if timeout < 0:\n            raise dbt.exceptions.FailedToConnectError(\n                \"retry_timeout cannot be negative or return a negative time.\"\n            )\n    \n        if retry_limit < 0 or retry_limit > sys.getrecursionlimit():\n            # This guard is not perfect others may add to the recursion limit (e.g. built-ins).\n            connection.handle = None\n            connection.state = ConnectionState.FAIL\n            raise dbt.exceptions.FailedToConnectError(\"retry_limit cannot be negative\")\n    \n        try:\n            connection.handle = connect()\n            connection.state = ConnectionState.OPEN\n            return connection\n    \n        except tuple(retryable_exceptions) as e:\n            if retry_limit <= 0:\n                connection.handle = None\n                connection.state = ConnectionState.FAIL\n                raise dbt.exceptions.FailedToConnectError(str(e))\n    \n            logger.debug(\n                f\"Got a retryable error when attempting to open a {cls.TYPE} connection.\\n\"\n                f\"{retry_limit} attempts remaining. Retrying in {timeout} seconds.\\n\"\n                f\"Error:\\n{e}\"\n            )\n    \n            sleep(timeout)\n            return cls.retry_connection(\n                connection=connection,\n                connect=connect,\n                logger=logger,\n                retry_limit=retry_limit - 1,\n                retry_timeout=retry_timeout,\n                retryable_exceptions=retryable_exceptions,\n                _attempts=_attempts + 1,\n            )\n    \n        except Exception as e:\n            connection.handle = None\n            connection.state = ConnectionState.FAIL\n>           raise dbt.exceptions.FailedToConnectError(str(e))\nE           dbt.exceptions.FailedToConnectError: Database Error\nE             Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE             For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/connections.py:271: FailedToConnectError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = 'macro create_schema'\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n>           yield\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py:1112: in execute_macro\n    result = macro_function(**kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:330: in __call__\n    return self.call_macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:257: in call_macro\n    return macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:763: in __call__\n    return self._invoke(arguments, autoescape)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:777: in _invoke\n    rv = self._func(*arguments)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/sandbox.py:393: in call\n    return __context.call(__obj, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:298: in call\n    return __obj(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:330: in __call__\n    return self.call_macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:257: in call_macro\n    return macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:763: in __call__\n    return self._invoke(arguments, autoescape)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:777: in _invoke\n    rv = self._func(*arguments)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/sandbox.py:393: in call\n    return __context.call(__obj, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:298: in call\n    return __obj(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:330: in __call__\n    return self.call_macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/clients/jinja.py:257: in call_macro\n    return macro(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:763: in __call__\n    return self._invoke(arguments, autoescape)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:777: in _invoke\n    rv = self._func(*arguments)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/sandbox.py:393: in call\n    return __context.call(__obj, *args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jinja2/runtime.py:298: in call\n    return __obj(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py:310: in execute\n    return self.connections.execute(sql=sql, auto_begin=auto_begin, fetch=fetch, limit=limit)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/connections.py:138: in execute\n    _, cursor = self.add_query(sql, auto_begin)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/connections.py:90: in add_query\n    return connection, cursor\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = \"\\n\\n      SELECT 'create_schema'\\n  \"\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n            yield\n        except Exception as e:\n            self.release()\n>           raise DbtRuntimeError(str(e))\nE           dbt.exceptions.DbtRuntimeError: Runtime Error\nE             Database Error\nE               Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE               For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:151: DbtRuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\nclean_up_logging = None\nproject_root = local('/tmp/pytest-of-runner/pytest-0/project8')\nprofiles_root = local('/tmp/pytest-of-runner/pytest-0/profile8')\nrequest = <SubRequest 'project' for <Function test_references>>\nunique_schema = 'public'\nprofiles_yml = {'config': {'send_anonymous_usage_stats': False}, 'test': {'outputs': {'default': {'account_name': 'automation', 'api_...'client_id': 'mrWFcIhFtkxKd5fLm40MrRp7rDuZBBZ0', 'client_secret': SecretStr('**********'), ...}}, 'target': 'default'}}\ndbt_project_yml = {'asset-paths': ['assets', 'invalid-asset-paths'], 'name': 'test', 'profile': 'test', 'seeds': {'quote_columns': True}, ...}\npackages_yml = None, dependencies_yml = None, selectors_yml = None\nadapter = <dbt.adapters.firebolt.impl.FireboltAdapter object at 0x7f45f690cf10>\nproject_files = None\nshared_data_dir = '/home/runner/work/dbt-firebolt/dbt-firebolt/tests/data'\ntest_data_dir = '/home/runner/work/dbt-firebolt/dbt-firebolt/tests/functional/adapter/data'\nlogs_dir = '/home/runner/work/dbt-firebolt/dbt-firebolt/logs/test17071562775346847467'\ntest_config = {}\n\n    @pytest.fixture(scope=\"class\")\n    def project(\n        clean_up_logging,\n        project_root,\n        profiles_root,\n        request,\n        unique_schema,\n        profiles_yml,\n        dbt_project_yml,\n        packages_yml,\n        dependencies_yml,\n        selectors_yml,\n        adapter,\n        project_files,\n        shared_data_dir,\n        test_data_dir,\n        logs_dir,\n        test_config,\n    ):\n        # Logbook warnings are ignored so we don't have to fork logbook to support python 3.10.\n        # This _only_ works for tests in `tests/` that use the project fixture.\n        warnings.filterwarnings(\"ignore\", category=DeprecationWarning, module=\"logbook\")\n        log_flags = Namespace(\n            LOG_PATH=logs_dir,\n            LOG_FORMAT=\"json\",\n            LOG_FORMAT_FILE=\"json\",\n            USE_COLORS=False,\n            USE_COLORS_FILE=False,\n            LOG_LEVEL=\"info\",\n            LOG_LEVEL_FILE=\"debug\",\n            DEBUG=False,\n            LOG_CACHE_EVENTS=False,\n            QUIET=False,\n            LOG_FILE_MAX_BYTES=1000000,\n        )\n        setup_event_logger(log_flags)\n        orig_cwd = os.getcwd()\n        os.chdir(project_root)\n        # Return whatever is needed later in tests but can only come from fixtures, so we can keep\n        # the signatures in the test signature to a minimum.\n        project = TestProjInfo(\n            project_root=project_root,\n            profiles_dir=profiles_root,\n            adapter_type=adapter.type(),\n            test_dir=request.fspath.dirname,\n            shared_data_dir=shared_data_dir,\n            test_data_dir=test_data_dir,\n            test_schema=unique_schema,\n            database=adapter.config.credentials.database,\n            test_config=test_config,\n        )\n        project.drop_test_schema()\n>       project.create_test_schema()\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/tests/fixtures/project.py:524: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/tests/fixtures/project.py:440: in create_test_schema\n    self.adapter.create_schema(relation)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/sql/impl.py:164: in create_schema\n    self.execute_macro(CREATE_SCHEMA_MACRO_NAME, kwargs=kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/base/impl.py:1112: in execute_macro\n    result = macro_function(**kwargs)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <dbt.adapters.firebolt.connections.FireboltConnectionManager object at 0x7f45f690c7f0>\nsql = 'macro create_schema'\n\n    @contextmanager\n    def exception_handler(self, sql: str) -> Generator:\n        try:\n            yield\n        except Exception as e:\n            self.release()\n>           raise DbtRuntimeError(str(e))\nE           dbt.exceptions.DbtRuntimeError: Runtime Error\nE             Runtime Error\nE               Database Error\nE                 Server error '500 Internal Server Error' for url 'https://api.staging.firebolt.io/web/v3/account/automation/resolve'\nE                 For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/dbt/adapters/firebolt/connections.py:151: DbtRuntimeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "51ce873d399ef0f9",
      "name" : "log",
      "source" : "51ce873d399ef0f9.txt",
      "type" : "text/plain",
      "size" : 286
    }, {
      "uid" : "32f303183acb1b05",
      "name" : "stdout",
      "source" : "32f303183acb1b05.txt",
      "type" : "text/plain",
      "size" : 64
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "logs_dir::0",
    "time" : {
      "start" : 1707156278234,
      "stop" : 1707156278234,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "adapter::0",
    "time" : {
      "start" : 1707156278236,
      "stop" : 1707156278236,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "profiles_yml::0",
    "time" : {
      "start" : 1707156278238,
      "stop" : 1707156278238,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.functional.adapter"
  }, {
    "name" : "suite",
    "value" : "test_basic"
  }, {
    "name" : "subSuite",
    "value" : "TestDocsGenReferencesFirebolt"
  }, {
    "name" : "host",
    "value" : "fv-az1113-935"
  }, {
    "name" : "thread",
    "value" : "2385-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.functional.adapter.test_basic"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "d1b497c0a8a4bffa.json",
  "parameterValues" : [ ]
}