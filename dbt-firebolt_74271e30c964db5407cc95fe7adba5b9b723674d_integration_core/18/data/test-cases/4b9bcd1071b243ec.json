{"uid":"4b9bcd1071b243ec","name":"test_unit_test_data_type","fullName":"tests.functional.adapter.unit_testing.test_unit_testing.TestFireboltUnitTestingTypes#test_unit_test_data_type","historyId":"befa0c738caa43171237bee58e1dceea","time":{"start":1753453509412,"stop":1753453510333,"duration":921},"status":"failed","statusMessage":"AssertionError: unit test failed when testing model with 1","statusTrace":"self = <test_unit_testing.TestFireboltUnitTestingTypes object at 0x7f959f4e1a80>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7f959c16f7c0>\ndata_types = [['1', '1'], [\"'1'\", '1'], ['true', 'true'], [\"DATE '2020-01-02'\", '2020-01-02'], [\"TIMESTAMP '2013-11-03 00:00:00'\", '2013-11-03 00:00:00'], [\"TIMESTAMPTZ '2013-11-03 00:00:00-0'\", '2013-11-03 00:00:00-0'], ...]\n\n    def test_unit_test_data_type(self, project, data_types):\n        for sql_value, yaml_value in data_types:\n            # Write parametrized type value to sql files\n            write_file(\n                my_upstream_model_sql.format(sql_value=sql_value),\n                \"models\",\n                \"my_upstream_model.sql\",\n            )\n    \n            # Write parametrized type value to unit test yaml definition\n            write_file(\n                test_my_model_yml.format(yaml_value=yaml_value),\n                \"models\",\n                \"schema.yml\",\n            )\n    \n            results = run_dbt([\"run\", \"--select\", \"my_upstream_model\"])\n            assert len(results) == 1\n    \n            try:\n>               run_dbt([\"test\", \"--select\", \"my_model\"])\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/dbt/tests/adapter/unit_testing/test_types.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ['test', '--select', 'my_model', '--project-dir', '/tmp/pytest-of-runner/pytest-0/project62', '--profiles-dir', ...]\nexpect_pass = True, callbacks = None\n\n    def run_dbt(\n        args: Optional[List[str]] = None,\n        expect_pass: bool = True,\n        callbacks: Optional[List[Callable[[EventMsg], None]]] = None,\n    ):\n        # reset global vars\n        reset_metadata_vars()\n    \n        if args is None:\n            args = [\"run\"]\n    \n        print(\"\\n\\nInvoking dbt with {}\".format(args))\n        from dbt.flags import get_flags\n    \n        flags = get_flags()\n        project_dir = getattr(flags, \"PROJECT_DIR\", None)\n        profiles_dir = getattr(flags, \"PROFILES_DIR\", None)\n        if project_dir and \"--project-dir\" not in args:\n            args.extend([\"--project-dir\", project_dir])\n        if profiles_dir and \"--profiles-dir\" not in args:\n            args.extend([\"--profiles-dir\", profiles_dir])\n        dbt = dbtRunner(callbacks=callbacks)\n    \n        res = dbt.invoke(args)\n    \n        # the exception is immediately raised to be caught in tests\n        # using a pattern like `with pytest.raises(SomeException):`\n        if res.exception is not None:\n            raise res.exception\n    \n        if expect_pass is not None:\n>           assert res.success == expect_pass, \"dbt exit state did not match expected\"\nE           AssertionError: dbt exit state did not match expected\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/dbt/tests/util.py:107: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_unit_testing.TestFireboltUnitTestingTypes object at 0x7f959f4e1a80>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7f959c16f7c0>\ndata_types = [['1', '1'], [\"'1'\", '1'], ['true', 'true'], [\"DATE '2020-01-02'\", '2020-01-02'], [\"TIMESTAMP '2013-11-03 00:00:00'\", '2013-11-03 00:00:00'], [\"TIMESTAMPTZ '2013-11-03 00:00:00-0'\", '2013-11-03 00:00:00-0'], ...]\n\n    def test_unit_test_data_type(self, project, data_types):\n        for sql_value, yaml_value in data_types:\n            # Write parametrized type value to sql files\n            write_file(\n                my_upstream_model_sql.format(sql_value=sql_value),\n                \"models\",\n                \"my_upstream_model.sql\",\n            )\n    \n            # Write parametrized type value to unit test yaml definition\n            write_file(\n                test_my_model_yml.format(yaml_value=yaml_value),\n                \"models\",\n                \"schema.yml\",\n            )\n    \n            results = run_dbt([\"run\", \"--select\", \"my_upstream_model\"])\n            assert len(results) == 1\n    \n            try:\n                run_dbt([\"test\", \"--select\", \"my_model\"])\n            except Exception:\n>               raise AssertionError(f\"unit test failed when testing model with {sql_value}\")\nE               AssertionError: unit test failed when testing model with 1\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/dbt/tests/adapter/unit_testing/test_types.py:80: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"tmpdir_factory","time":{"start":1753453390221,"stop":1753453390221,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shared_data_dir","time":{"start":1753453390221,"stop":1753453390221,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_data_dir","time":{"start":1753453506117,"stop":1753453506117,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"initialization","time":{"start":1753453509314,"stop":1753453509314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_root","time":{"start":1753453509314,"stop":1753453509315,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"environment","time":{"start":1753453509314,"stop":1753453509314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clean_up_logging","time":{"start":1753453509314,"stop":1753453509314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_root","time":{"start":1753453509315,"stop":1753453509316,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_profile_target","time":{"start":1753453509316,"stop":1753453509316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_yml","time":{"start":1753453509316,"stop":1753453509317,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"unique_schema","time":{"start":1753453509316,"stop":1753453509316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_config_update","time":{"start":1753453509316,"stop":1753453509316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"prefix","time":{"start":1753453509316,"stop":1753453509316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_profile_data","time":{"start":1753453509316,"stop":1753453509316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_config_update","time":{"start":1753453509317,"stop":1753453509317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"is_firebolt_core","time":{"start":1753453509317,"stop":1753453509317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logs_dir","time":{"start":1753453509317,"stop":1753453509317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"adapter","time":{"start":1753453509318,"stop":1753453509352,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_project_yml","time":{"start":1753453509318,"stop":1753453509318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_setup","time":{"start":1753453509352,"stop":1753453509410,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_config","time":{"start":1753453509352,"stop":1753453509352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"seeds","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"selectors_yml","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"selectors","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"analyses","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tests","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"properties","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"macros","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"models","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"snapshots","time":{"start":1753453509410,"stop":1753453509410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dependencies_yml","time":{"start":1753453509411,"stop":1753453509411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"packages","time":{"start":1753453509411,"stop":1753453509411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1753453509411,"stop":1753453509412,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"packages_yml","time":{"start":1753453509411,"stop":1753453509411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dependencies","time":{"start":1753453509411,"stop":1753453509411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_files","time":{"start":1753453509411,"stop":1753453509411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data_types","time":{"start":1753453509412,"stop":1753453509412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: unit test failed when testing model with 1","statusTrace":"self = <test_unit_testing.TestFireboltUnitTestingTypes object at 0x7f959f4e1a80>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7f959c16f7c0>\ndata_types = [['1', '1'], [\"'1'\", '1'], ['true', 'true'], [\"DATE '2020-01-02'\", '2020-01-02'], [\"TIMESTAMP '2013-11-03 00:00:00'\", '2013-11-03 00:00:00'], [\"TIMESTAMPTZ '2013-11-03 00:00:00-0'\", '2013-11-03 00:00:00-0'], ...]\n\n    def test_unit_test_data_type(self, project, data_types):\n        for sql_value, yaml_value in data_types:\n            # Write parametrized type value to sql files\n            write_file(\n                my_upstream_model_sql.format(sql_value=sql_value),\n                \"models\",\n                \"my_upstream_model.sql\",\n            )\n    \n            # Write parametrized type value to unit test yaml definition\n            write_file(\n                test_my_model_yml.format(yaml_value=yaml_value),\n                \"models\",\n                \"schema.yml\",\n            )\n    \n            results = run_dbt([\"run\", \"--select\", \"my_upstream_model\"])\n            assert len(results) == 1\n    \n            try:\n>               run_dbt([\"test\", \"--select\", \"my_model\"])\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/dbt/tests/adapter/unit_testing/test_types.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ['test', '--select', 'my_model', '--project-dir', '/tmp/pytest-of-runner/pytest-0/project62', '--profiles-dir', ...]\nexpect_pass = True, callbacks = None\n\n    def run_dbt(\n        args: Optional[List[str]] = None,\n        expect_pass: bool = True,\n        callbacks: Optional[List[Callable[[EventMsg], None]]] = None,\n    ):\n        # reset global vars\n        reset_metadata_vars()\n    \n        if args is None:\n            args = [\"run\"]\n    \n        print(\"\\n\\nInvoking dbt with {}\".format(args))\n        from dbt.flags import get_flags\n    \n        flags = get_flags()\n        project_dir = getattr(flags, \"PROJECT_DIR\", None)\n        profiles_dir = getattr(flags, \"PROFILES_DIR\", None)\n        if project_dir and \"--project-dir\" not in args:\n            args.extend([\"--project-dir\", project_dir])\n        if profiles_dir and \"--profiles-dir\" not in args:\n            args.extend([\"--profiles-dir\", profiles_dir])\n        dbt = dbtRunner(callbacks=callbacks)\n    \n        res = dbt.invoke(args)\n    \n        # the exception is immediately raised to be caught in tests\n        # using a pattern like `with pytest.raises(SomeException):`\n        if res.exception is not None:\n            raise res.exception\n    \n        if expect_pass is not None:\n>           assert res.success == expect_pass, \"dbt exit state did not match expected\"\nE           AssertionError: dbt exit state did not match expected\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/dbt/tests/util.py:107: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_unit_testing.TestFireboltUnitTestingTypes object at 0x7f959f4e1a80>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7f959c16f7c0>\ndata_types = [['1', '1'], [\"'1'\", '1'], ['true', 'true'], [\"DATE '2020-01-02'\", '2020-01-02'], [\"TIMESTAMP '2013-11-03 00:00:00'\", '2013-11-03 00:00:00'], [\"TIMESTAMPTZ '2013-11-03 00:00:00-0'\", '2013-11-03 00:00:00-0'], ...]\n\n    def test_unit_test_data_type(self, project, data_types):\n        for sql_value, yaml_value in data_types:\n            # Write parametrized type value to sql files\n            write_file(\n                my_upstream_model_sql.format(sql_value=sql_value),\n                \"models\",\n                \"my_upstream_model.sql\",\n            )\n    \n            # Write parametrized type value to unit test yaml definition\n            write_file(\n                test_my_model_yml.format(yaml_value=yaml_value),\n                \"models\",\n                \"schema.yml\",\n            )\n    \n            results = run_dbt([\"run\", \"--select\", \"my_upstream_model\"])\n            assert len(results) == 1\n    \n            try:\n                run_dbt([\"test\", \"--select\", \"my_model\"])\n            except Exception:\n>               raise AssertionError(f\"unit test failed when testing model with {sql_value}\")\nE               AssertionError: unit test failed when testing model with 1\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/dbt/tests/adapter/unit_testing/test_types.py:80: AssertionError","steps":[],"attachments":[{"uid":"4b44a43456a5e5b0","name":"log","source":"4b44a43456a5e5b0.txt","type":"text/plain","size":12239},{"uid":"26a66c24db5ecc13","name":"stdout","source":"26a66c24db5ecc13.txt","type":"text/plain","size":2807},{"uid":"29667a2be1e26bfd","name":"stderr","source":"29667a2be1e26bfd.txt","type":"text/plain","size":10244}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"project_setup::0","time":{"start":1753453510348,"stop":1753453510706,"duration":358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"adapter::0","time":{"start":1753453510706,"stop":1753453510706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logs_dir::0","time":{"start":1753453510707,"stop":1753453510707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_yml::0","time":{"start":1753453510708,"stop":1753453510708,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.functional.adapter.unit_testing"},{"name":"suite","value":"test_unit_testing"},{"name":"subSuite","value":"TestFireboltUnitTestingTypes"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"4480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.functional.adapter.unit_testing.test_unit_testing"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4b9bcd1071b243ec.json","parameterValues":[]}