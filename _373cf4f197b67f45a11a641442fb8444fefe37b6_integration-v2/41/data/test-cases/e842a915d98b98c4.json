{"uid":"e842a915d98b98c4","name":"test__one_unique_key","fullName":"tests.functional.adapter.incremental.test_incremental.TestUniqueKeyDeleteInsertFirebolt#test__one_unique_key","historyId":"a35d0d6dd148bfdabfb26152280c970c","time":{"start":1753382465726,"stop":1753382479689,"duration":13963},"description":"with one unique key, model will overwrite existing row","descriptionHtml":"<p>with one unique key, model will overwrite existing row</p>\n","status":"failed","statusMessage":"AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key","statusTrace":"self = <test_incremental.TestUniqueKeyDeleteInsertFirebolt object at 0x7f57a8c0a5e0>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7f57a7046190>\n\n    def test__one_unique_key(self, project):\n        \"\"\"with one unique key, model will overwrite existing row\"\"\"\n    \n        expected_fields = self.get_expected_fields(\n            relation=\"one_str__overwrite\", seed_rows=8, opt_model_count=1\n        )\n        test_case_fields = self.get_test_fields(\n            project,\n            seed=\"seed\",\n            incremental_model=\"str_unique_key\",\n            update_sql_file=\"duplicate_insert\",\n            opt_model_count=self.update_incremental_model(\"one_str__overwrite\"),\n        )\n>       self.check_scenario_correctness(expected_fields, test_case_fields, project)\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:411: in check_scenario_correctness\n    check_relations_equal(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:407: in check_relations_equal\n    return check_relations_equal_with_relations(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nadapter = <dbt.adapters.firebolt.impl.FireboltAdapter object at 0x7f57a6167e20>\nrelations = [<FireboltRelation one_str__overwrite>, <FireboltRelation str_unique_key>]\ncompare_snapshot_cols = False\n\n    def check_relations_equal_with_relations(\n        adapter: Adapter, relations: List, compare_snapshot_cols=False\n    ):\n        with get_connection(adapter):\n            basis, compares = relations[0], relations[1:]\n            # Skip columns starting with \"dbt_\" because we don't want to\n            # compare those, since they are time sensitive\n            # (unless comparing \"dbt_\" snapshot columns is explicitly enabled)\n            column_names = [\n                c.name\n                for c in adapter.get_columns_in_relation(basis)  # type: ignore\n                if not c.name.lower().startswith(\"dbt_\") or compare_snapshot_cols\n            ]\n    \n            for relation in compares:\n                sql = adapter.get_rows_different_sql(basis, relation, column_names=column_names)  # type: ignore\n                _, tbl = adapter.execute(sql, fetch=True)\n                num_rows = len(tbl)\n                assert (\n                    num_rows == 1\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of rows ({num_rows})\"\n                num_cols = len(tbl[0])\n                assert (\n                    num_cols == 2\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of cols ({num_cols})\"\n                row_count_difference = tbl[0][0]\n                assert (\n                    row_count_difference == 0\n                ), f\"Got {row_count_difference} difference in row count betwen {basis} and {relation}\"\n                rows_mismatched = tbl[0][1]\n>               assert (\n                    rows_mismatched == 0\n                ), f\"Got {rows_mismatched} different rows between {basis} and {relation}\"\nE               AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:459: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"shared_data_dir","time":{"start":1753381384326,"stop":1753381384327,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tmpdir_factory","time":{"start":1753381384327,"stop":1753381384327,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_data_dir","time":{"start":1753382420585,"stop":1753382420585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"environment","time":{"start":1753382435228,"stop":1753382435228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"initialization","time":{"start":1753382435228,"stop":1753382435228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clean_up_logging","time":{"start":1753382435228,"stop":1753382435228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_root","time":{"start":1753382435229,"stop":1753382435229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_root","time":{"start":1753382435229,"stop":1753382435230,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_profile_data","time":{"start":1753382435230,"stop":1753382435230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_config_update","time":{"start":1753382435230,"stop":1753382435230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"prefix","time":{"start":1753382435230,"stop":1753382435230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_yml","time":{"start":1753382435230,"stop":1753382435231,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"unique_schema","time":{"start":1753382435230,"stop":1753382435230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_profile_target","time":{"start":1753382435230,"stop":1753382435230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logs_dir","time":{"start":1753382435231,"stop":1753382435232,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"adapter","time":{"start":1753382435232,"stop":1753382435263,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_config_update","time":{"start":1753382435232,"stop":1753382435232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_project_yml","time":{"start":1753382435232,"stop":1753382435232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_setup","time":{"start":1753382435263,"stop":1753382435927,"duration":664},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_config","time":{"start":1753382435263,"stop":1753382435263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"macros","time":{"start":1753382435927,"stop":1753382435928,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"models","time":{"start":1753382435927,"stop":1753382435927,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"packages_yml","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"selectors","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"properties","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"seeds","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"selectors_yml","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"analyses","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_files","time":{"start":1753382435928,"stop":1753382435929,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"packages","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dependencies","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dependencies_yml","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tests","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"snapshots","time":{"start":1753382435928,"stop":1753382435928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1753382435930,"stop":1753382435930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clean_up","time":{"start":1753382465726,"stop":1753382465726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_config_update","time":{"start":1753382606261,"stop":1753382606261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"seeds","time":{"start":1753382607004,"stop":1753382607004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"with one unique key, model will overwrite existing row","status":"failed","statusMessage":"AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key","statusTrace":"self = <test_incremental.TestUniqueKeyDeleteInsertFirebolt object at 0x7f57a8c0a5e0>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7f57a7046190>\n\n    def test__one_unique_key(self, project):\n        \"\"\"with one unique key, model will overwrite existing row\"\"\"\n    \n        expected_fields = self.get_expected_fields(\n            relation=\"one_str__overwrite\", seed_rows=8, opt_model_count=1\n        )\n        test_case_fields = self.get_test_fields(\n            project,\n            seed=\"seed\",\n            incremental_model=\"str_unique_key\",\n            update_sql_file=\"duplicate_insert\",\n            opt_model_count=self.update_incremental_model(\"one_str__overwrite\"),\n        )\n>       self.check_scenario_correctness(expected_fields, test_case_fields, project)\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:411: in check_scenario_correctness\n    check_relations_equal(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:407: in check_relations_equal\n    return check_relations_equal_with_relations(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nadapter = <dbt.adapters.firebolt.impl.FireboltAdapter object at 0x7f57a6167e20>\nrelations = [<FireboltRelation one_str__overwrite>, <FireboltRelation str_unique_key>]\ncompare_snapshot_cols = False\n\n    def check_relations_equal_with_relations(\n        adapter: Adapter, relations: List, compare_snapshot_cols=False\n    ):\n        with get_connection(adapter):\n            basis, compares = relations[0], relations[1:]\n            # Skip columns starting with \"dbt_\" because we don't want to\n            # compare those, since they are time sensitive\n            # (unless comparing \"dbt_\" snapshot columns is explicitly enabled)\n            column_names = [\n                c.name\n                for c in adapter.get_columns_in_relation(basis)  # type: ignore\n                if not c.name.lower().startswith(\"dbt_\") or compare_snapshot_cols\n            ]\n    \n            for relation in compares:\n                sql = adapter.get_rows_different_sql(basis, relation, column_names=column_names)  # type: ignore\n                _, tbl = adapter.execute(sql, fetch=True)\n                num_rows = len(tbl)\n                assert (\n                    num_rows == 1\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of rows ({num_rows})\"\n                num_cols = len(tbl[0])\n                assert (\n                    num_cols == 2\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of cols ({num_cols})\"\n                row_count_difference = tbl[0][0]\n                assert (\n                    row_count_difference == 0\n                ), f\"Got {row_count_difference} difference in row count betwen {basis} and {relation}\"\n                rows_mismatched = tbl[0][1]\n>               assert (\n                    rows_mismatched == 0\n                ), f\"Got {rows_mismatched} different rows between {basis} and {relation}\"\nE               AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:459: AssertionError","steps":[],"attachments":[{"uid":"fcbc93411e0af136","name":"log","source":"fcbc93411e0af136.txt","type":"text/plain","size":37148},{"uid":"e9c4b7e4c5ee19b0","name":"stdout","source":"e9c4b7e4c5ee19b0.txt","type":"text/plain","size":3049},{"uid":"cd2254e18f3ea6a1","name":"stderr","source":"cd2254e18f3ea6a1.txt","type":"text/plain","size":32779}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"clean_up::0","time":{"start":1753382479706,"stop":1753382484079,"duration":4373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_setup::0","time":{"start":1753382602530,"stop":1753382606244,"duration":3714},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"adapter::0","time":{"start":1753382606245,"stop":1753382606245,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logs_dir::0","time":{"start":1753382606246,"stop":1753382606246,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_yml::0","time":{"start":1753382606247,"stop":1753382606247,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.functional.adapter.incremental"},{"name":"suite","value":"test_incremental"},{"name":"subSuite","value":"TestUniqueKeyDeleteInsertFirebolt"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"2472-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.functional.adapter.incremental.test_incremental"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e842a915d98b98c4.json","parameterValues":[]}