{"uid":"e732fff9118699e8","name":"test__one_unique_key","fullName":"tests.functional.adapter.incremental.test_incremental.TestUniqueKeyDeleteInsertFirebolt#test__one_unique_key","historyId":"a35d0d6dd148bfdabfb26152280c970c","time":{"start":1753968028051,"stop":1753968043823,"duration":15772},"description":"with one unique key, model will overwrite existing row","descriptionHtml":"<p>with one unique key, model will overwrite existing row</p>\n","status":"failed","statusMessage":"AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key","statusTrace":"self = <test_incremental.TestUniqueKeyDeleteInsertFirebolt object at 0x7fee89db5400>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7fee86c1feb0>\n\n    def test__one_unique_key(self, project):\n        \"\"\"with one unique key, model will overwrite existing row\"\"\"\n    \n        expected_fields = self.get_expected_fields(\n            relation=\"one_str__overwrite\", seed_rows=8, opt_model_count=1\n        )\n        test_case_fields = self.get_test_fields(\n            project,\n            seed=\"seed\",\n            incremental_model=\"str_unique_key\",\n            update_sql_file=\"duplicate_insert\",\n            opt_model_count=self.update_incremental_model(\"one_str__overwrite\"),\n        )\n>       self.check_scenario_correctness(expected_fields, test_case_fields, project)\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:411: in check_scenario_correctness\n    check_relations_equal(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:407: in check_relations_equal\n    return check_relations_equal_with_relations(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nadapter = <dbt.adapters.firebolt.impl.FireboltAdapter object at 0x7fee859420d0>\nrelations = [<FireboltRelation one_str__overwrite>, <FireboltRelation str_unique_key>]\ncompare_snapshot_cols = False\n\n    def check_relations_equal_with_relations(\n        adapter: Adapter, relations: List, compare_snapshot_cols=False\n    ):\n        with get_connection(adapter):\n            basis, compares = relations[0], relations[1:]\n            # Skip columns starting with \"dbt_\" because we don't want to\n            # compare those, since they are time sensitive\n            # (unless comparing \"dbt_\" snapshot columns is explicitly enabled)\n            column_names = [\n                c.name\n                for c in adapter.get_columns_in_relation(basis)  # type: ignore\n                if not c.name.lower().startswith(\"dbt_\") or compare_snapshot_cols\n            ]\n    \n            for relation in compares:\n                sql = adapter.get_rows_different_sql(basis, relation, column_names=column_names)  # type: ignore\n                _, tbl = adapter.execute(sql, fetch=True)\n                num_rows = len(tbl)\n                assert (\n                    num_rows == 1\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of rows ({num_rows})\"\n                num_cols = len(tbl[0])\n                assert (\n                    num_cols == 2\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of cols ({num_cols})\"\n                row_count_difference = tbl[0][0]\n                assert (\n                    row_count_difference == 0\n                ), f\"Got {row_count_difference} difference in row count betwen {basis} and {relation}\"\n                rows_mismatched = tbl[0][1]\n>               assert (\n                    rows_mismatched == 0\n                ), f\"Got {rows_mismatched} different rows between {basis} and {relation}\"\nE               AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:459: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"shared_data_dir","time":{"start":1753966746648,"stop":1753966746648,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tmpdir_factory","time":{"start":1753966746648,"stop":1753966746648,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_data_dir","time":{"start":1753967978676,"stop":1753967978677,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_root","time":{"start":1753967995349,"stop":1753967995350,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"environment","time":{"start":1753967995349,"stop":1753967995349,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"initialization","time":{"start":1753967995349,"stop":1753967995349,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clean_up_logging","time":{"start":1753967995349,"stop":1753967995349,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"prefix","time":{"start":1753967995350,"stop":1753967995350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_root","time":{"start":1753967995350,"stop":1753967995350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_yml","time":{"start":1753967995351,"stop":1753967995352,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_profile_target","time":{"start":1753967995351,"stop":1753967995351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_profile_data","time":{"start":1753967995351,"stop":1753967995351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"unique_schema","time":{"start":1753967995351,"stop":1753967995351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_config_update","time":{"start":1753967995351,"stop":1753967995351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_config_update","time":{"start":1753967995352,"stop":1753967995352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logs_dir","time":{"start":1753967995352,"stop":1753967995352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dbt_project_yml","time":{"start":1753967995352,"stop":1753967995353,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"adapter","time":{"start":1753967995353,"stop":1753967995385,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_setup","time":{"start":1753967995385,"stop":1753967996119,"duration":734},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_config","time":{"start":1753967995385,"stop":1753967995385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"snapshots","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"models","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tests","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"macros","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"seeds","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"analyses","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"selectors","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"properties","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"selectors_yml","time":{"start":1753967996120,"stop":1753967996120,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_files","time":{"start":1753967996122,"stop":1753967996123,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"packages","time":{"start":1753967996122,"stop":1753967996122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"packages_yml","time":{"start":1753967996122,"stop":1753967996122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dependencies","time":{"start":1753967996122,"stop":1753967996122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dependencies_yml","time":{"start":1753967996122,"stop":1753967996122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1753967996123,"stop":1753967996123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clean_up","time":{"start":1753968028051,"stop":1753968028051,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_config_update","time":{"start":1753968178915,"stop":1753968178915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"seeds","time":{"start":1753968179701,"stop":1753968179702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"with one unique key, model will overwrite existing row","status":"failed","statusMessage":"AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key","statusTrace":"self = <test_incremental.TestUniqueKeyDeleteInsertFirebolt object at 0x7fee89db5400>\nproject = <dbt.tests.fixtures.project.TestProjInfo object at 0x7fee86c1feb0>\n\n    def test__one_unique_key(self, project):\n        \"\"\"with one unique key, model will overwrite existing row\"\"\"\n    \n        expected_fields = self.get_expected_fields(\n            relation=\"one_str__overwrite\", seed_rows=8, opt_model_count=1\n        )\n        test_case_fields = self.get_test_fields(\n            project,\n            seed=\"seed\",\n            incremental_model=\"str_unique_key\",\n            update_sql_file=\"duplicate_insert\",\n            opt_model_count=self.update_incremental_model(\"one_str__overwrite\"),\n        )\n>       self.check_scenario_correctness(expected_fields, test_case_fields, project)\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/adapter/incremental/test_incremental_unique_id.py:411: in check_scenario_correctness\n    check_relations_equal(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:407: in check_relations_equal\n    return check_relations_equal_with_relations(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nadapter = <dbt.adapters.firebolt.impl.FireboltAdapter object at 0x7fee859420d0>\nrelations = [<FireboltRelation one_str__overwrite>, <FireboltRelation str_unique_key>]\ncompare_snapshot_cols = False\n\n    def check_relations_equal_with_relations(\n        adapter: Adapter, relations: List, compare_snapshot_cols=False\n    ):\n        with get_connection(adapter):\n            basis, compares = relations[0], relations[1:]\n            # Skip columns starting with \"dbt_\" because we don't want to\n            # compare those, since they are time sensitive\n            # (unless comparing \"dbt_\" snapshot columns is explicitly enabled)\n            column_names = [\n                c.name\n                for c in adapter.get_columns_in_relation(basis)  # type: ignore\n                if not c.name.lower().startswith(\"dbt_\") or compare_snapshot_cols\n            ]\n    \n            for relation in compares:\n                sql = adapter.get_rows_different_sql(basis, relation, column_names=column_names)  # type: ignore\n                _, tbl = adapter.execute(sql, fetch=True)\n                num_rows = len(tbl)\n                assert (\n                    num_rows == 1\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of rows ({num_rows})\"\n                num_cols = len(tbl[0])\n                assert (\n                    num_cols == 2\n                ), f\"Invalid sql query from get_rows_different_sql: incorrect number of cols ({num_cols})\"\n                row_count_difference = tbl[0][0]\n                assert (\n                    row_count_difference == 0\n                ), f\"Got {row_count_difference} difference in row count betwen {basis} and {relation}\"\n                rows_mismatched = tbl[0][1]\n>               assert (\n                    rows_mismatched == 0\n                ), f\"Got {rows_mismatched} different rows between {basis} and {relation}\"\nE               AssertionError: Got 2 different rows between one_str__overwrite and str_unique_key\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/dbt/tests/util.py:459: AssertionError","steps":[],"attachments":[{"uid":"9796a82611827a4b","name":"log","source":"9796a82611827a4b.txt","type":"text/plain","size":37816},{"uid":"cd40a3358b6251e3","name":"stdout","source":"cd40a3358b6251e3.txt","type":"text/plain","size":3049},{"uid":"aa1e302f2b04bb9f","name":"stderr","source":"aa1e302f2b04bb9f.txt","type":"text/plain","size":33371}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"clean_up::0","time":{"start":1753968043840,"stop":1753968048840,"duration":5000},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_setup::0","time":{"start":1753968174399,"stop":1753968178898,"duration":4499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"adapter::0","time":{"start":1753968178899,"stop":1753968178899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"profiles_yml::0","time":{"start":1753968178901,"stop":1753968178901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logs_dir::0","time":{"start":1753968178901,"stop":1753968178901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.functional.adapter.incremental"},{"name":"suite","value":"test_incremental"},{"name":"subSuite","value":"TestUniqueKeyDeleteInsertFirebolt"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2567-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.functional.adapter.incremental.test_incremental"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e732fff9118699e8.json","parameterValues":[]}